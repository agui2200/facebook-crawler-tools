package fb

import (
	"encoding/json"
	"facebook_login/global"
	"io"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/bitly/go-simplejson"
	"github.com/imroc/req"
)

// 将数字转换成特定的二进制形式
func itoBin(distance int) string {
	var a = strconv.FormatInt(int64(distance), 2)
	var b = strings.Repeat("0", len(a)-1)

	return b + a
}

func compressedString(text string) string {
	var g = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"
	reg := regexp.MustCompile(`[01]{6}`)
	result := reg.FindAllStringSubmatch(text+"00000", -1)

	var encode string
	for _, value := range result {

		index, err := strconv.ParseInt(value[0], 2, 8)
		global.CheckErr(err)

		encode += string(g[index])
	}
	return encode
}

func toCompressedString(data []int) string {
	var all = make([]int, len(data))
	copy(all, data)

	sort.Slice(all, func(i, j int) bool {
		return all[i] > all[j]
	})

	var temp = make([]int, len(all))
	copy(temp, all)

	var maxLength = temp[0]
	all = make([]int, maxLength+1)

	for _, value := range temp {
		if value > 0 {
			all[value] = 1
		}
	}

	var distance = 1
	var result []string
	var c = all[0]
	for i := 1; i < len(all); i++ {
		var f = all[i]
		if c == f {
			distance++
		} else {
			result = append(result, itoBin(distance))
			c = f
			distance = 1
		}
	}

	result = append(result, itoBin(distance))
	var encoded = compressedString(itoBin(all[0]) + strings.Join(result, ""))

	return encoded
}

func encpass(pwd string, timeStamp string, publicKey string, keyId string) string {

	type AutoGenerated1 struct {
		Data struct {
			Pwd       string `json:"pwd"`
			TimeStamp string `json:"timeStamp"`
			PublicKey string `json:"publicKey"`
			KeyID     string `json:"keyId"`
		} `json:"data"`
	}

	var data AutoGenerated1
	data.Data.Pwd = pwd
	data.Data.TimeStamp = timeStamp
	data.Data.PublicKey = publicKey
	data.Data.KeyID = keyId

	// json.Marshal
	reqParam, err1 := json.Marshal(&data)
	global.CheckErr(err1)

	res, err2 := req.Post(
		"http://127.0.0.1:3000/encpass",
		req.Header{
			"Content-Type": "application/json",
		}, reqParam)

	type AutoGenerated2 struct {
		Encrypted string `json:"encrypted"`
	}
	global.CheckErr(err2)
	var inventory AutoGenerated2

	body, _ := io.ReadAll(res.Response().Body)
	json.Unmarshal(body, &inventory)

	return inventory.Encrypted
}

// 获取第一次登录所需的一些参数
func getLoginParam() LoginParam {

	var param LoginParam
	var header = req.Header{
		`accept`:                    ` text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9`,
		`accept-language`:           ` zh-CN,zh;q=0.9`,
		`cache-control`:             ` no-cache`,
		`pragma`:                    ` no-cache`,
		`sec-ch-ua`:                 ` "Chromium";v="104", " Not A;Brand";v="99", "Google Chrome";v="104"`,
		`sec-ch-ua-mobile`:          ` ?0`,
		`sec-ch-ua-platform`:        ` "Windows"`,
		`sec-fetch-dest`:            ` document`,
		`sec-fetch-mode`:            ` navigate`,
		`sec-fetch-site`:            ` none`,
		`sec-fetch-user`:            ` ?1`,
		`upgrade-insecure-requests`: ` 1`,
		`user-agent`:                ` Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36`,
	}

	res, err := req.Get("https://www.facebook.com/", header)
	global.CheckErr(err)

	buffer, _ := io.ReadAll(res.Response().Body)
	body := string(buffer)

	//在主页中取出登录所需的一些参数
	param.Datr = global.StrBetween(body, "_js_datr\",\"", "\"")
	param.KeyID = global.StrBetween(body, "keyId\":", "}")
	param.Lsd = global.StrBetween(body, "lsd\" value=\"", "\"")
	param.PublicKey = global.StrBetween(body, "publicKey\":\"", "\"")
	param.Jazoest = global.StrBetween(body, `jazoest" value="`, `"`)

	for _, item := range res.Response().Cookies() {
		param.Cookie += item.Name + "=" + item.Value + ";"
	}
	param.Cookie += "datr=" + param.Datr + ";"

	return param
}

func getDyn(body string) ([]int, string) {

	var listJsonDyn []string
	var dyn []int

	//匹配出页面中所有的script标签，因为里面有生成Dyn参数所需的json
	reg := regexp.MustCompile(`<script type="application/json" data-content-len="\d+" data-sjs>(.*?)</script>`)
	result := reg.FindAllStringSubmatch(body, -1)

	//将匹配出的json储存到listJsonDyn切片中
	for _, value := range result {

		data, err := simplejson.NewJson([]byte(value[1]))
		global.CheckErr(err)

		if data.Get("require").GetIndex(0).GetIndex(1).MustString() == "handle" {
			listJsonDyn = append(listJsonDyn, value[1])
		}
	}

	//解析dyn
	for _, value := range listJsonDyn {
		data, err := simplejson.NewJson([]byte(value))
		global.CheckErr(err)

		var length = len(data.Get("require").GetIndex(0).GetIndex(3).GetIndex(0).Get("__bbox").Get("define").MustArray())
		if length < 0 {
			continue
		}

		var slice = make([]int, length)
		for i := 0; i < length; i++ {
			var value = data.Get("require").GetIndex(0).GetIndex(3).GetIndex(0).Get("__bbox").Get("define").GetIndex(i).GetIndex(3).MustInt()
			slice[i] = value
			dyn = append(dyn, value)
		}
	}

	return dyn, toCompressedString(dyn)
}

func getCsr(body string) ([]int, string) {
	var listJsonCsr []string
	var csr string
	var reg *regexp.Regexp

	//匹配出源码中所有的link标签，并取出data-p属性的值
	reg = regexp.MustCompile(`<link type="text/css" rel="stylesheet" href=".*?" crossorigin=".*?" data-p="(.*?)" data-c="2" />`)
	result1 := reg.FindAllStringSubmatch(body, -1)
	for _, value := range result1 {
		csr += value[1] + ","
	}

	//匹配出所有Script标签中的json
	reg = regexp.MustCompile(`<script type="application/json" data-content-len="\d+" data-sjs>(.*?)</script>`)
	result2 := reg.FindAllStringSubmatch(body, -1)

	for _, value := range result2 {

		//解析json，过滤出后续计算csr所需的json
		data, err := simplejson.NewJson([]byte(value[1]))
		global.CheckErr(err)

		if data.Get("require").GetIndex(0).GetIndex(1).MustString() == "handlePayload" {
			listJsonCsr = append(listJsonCsr, value[1])
		}
	}

	//对经过过滤的json解析，取出后续计算csr所需的值
	for _, value := range listJsonCsr {
		data, err := simplejson.NewJson([]byte(value))
		global.CheckErr(err)

		var rsrcMap = data.Get("require").GetIndex(0).GetIndex(3).GetIndex(0).Get("rsrcMap").MustMap()
		for _, v := range rsrcMap {

			c, exist := (v.(map[string]interface{}))["c"]
			if exist {
				var p = (v.(map[string]interface{}))["p"].(string)
				if c.(json.Number) == "2" {
					csr += p + ","
				}
			}

		}

		//过滤值，要求 rsrcMap 或 rsrcTage 属性不能空
		var rsrcMapExist = data.Get("require").GetIndex(0).GetIndex(3).GetIndex(0).Get("rsrcMap").MustMap()
		var rsrcTagsExist = data.Get("require").GetIndex(0).GetIndex(3).GetIndex(0).Get("rsrcTags").MustArray()

		if len(rsrcMapExist) > 0 || len(rsrcTagsExist) > 0 {
			var csrUpgrade = data.Get("require").GetIndex(0).GetIndex(3).GetIndex(0).Get("csrUpgrade").MustString()
			if len(csrUpgrade) > 0 {
				csr += csrUpgrade + ","
			}
		}
	}

	var newCsr []int
	buffer := strings.Split(strings.ReplaceAll(csr, ":", ""), ",")
	for _, value := range buffer {
		if len(value) > 0 {
			v, err := strconv.Atoi(value)
			global.CheckErr(err)
			newCsr = append(newCsr, v)
		}
	}

	return newCsr, toCompressedString(newCsr)
}

func graphql(param GraphqlParam) (bool, string) {
	s := global.RandomStr(6) + ":" + global.RandomStr(6) + ":" + global.RandomStr(6)
	spin_t := strconv.FormatInt(time.Now().Unix(), 10)

	//准备协议头
	header := req.Header{
		`Accept`:                      `*/*`,
		`Accept-Language`:             `zh-CN,zh;q=0.9`,
		`Cache-Control`:               `no-cache`,
		`Connection`:                  `keep-alive`,
		`Content-Type`:                `application/x-www-form-urlencoded`,
		`Cookie`:                      param.Cookie,
		`Host`:                        `www.facebook.com`,
		`Origin`:                      `https://www.facebook.com`,
		`Pragma`:                      `no-cache`,
		`Referer`:                     `https://www.facebook.com/`,
		`sec-ch-prefers-color-scheme`: `light`,
		`sec-ch-ua`:                   `"Chromium";v="104", " Not A;Brand";v="99", "Google Chrome";v="104"`,
		`sec-ch-ua-mobile`:            `?0`,
		`sec-ch-ua-platform`:          `"Windows"`,
		`Sec-Fetch-Dest`:              `empty`,
		`Sec-Fetch-Mode`:              `cors`,
		`Sec-Fetch-Site`:              `same-origin`,
		`User-Agent`:                  `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36`,
		`X-FB-Friendly-Name`:          param.Fb_api_req_friendly_name,
		`X-FB-LSD`:                    param.Lsd,
	}

	//准备POST数据
	var data = req.Param{
		`av`:                       param.UserId,
		`__user`:                   param.UserId,
		`__a`:                      `1`,
		`__dyn`:                    param.Dyn,
		`__csr`:                    param.Csr,
		`__req`:                    global.RandomStr(2),
		`__hs`:                     `19266.HYPcomet_pkg.2.1.0.2.1`,
		`dpr`:                      `1.5`,
		`__ccg`:                    param.Ccg,
		`__rev`:                    param.Rev,
		`__s`:                      s,
		`__hsi`:                    param.Hsi,
		`__comet_req`:              param.Comet_req,
		`fb_dtsg`:                  param.Fb_dtsg,
		`jazoest`:                  param.Jazoes,
		`lsd`:                      param.Lsd,
		`__spin_r`:                 param.Rev,
		`__spin_b`:                 `trunk`,
		`__spin_t`:                 spin_t,
		`fb_api_caller_class`:      param.Fb_api_caller_class,
		`fb_api_req_friendly_name`: param.Fb_api_req_friendly_name,
		`variables`:                param.Variables,
		`server_timestamps`:        `true`,
		`doc_id`:                   param.Doc_id,
	}

	res, err1 := req.Post("https://www.facebook.com/api/graphql/",
		header, data)

	if err1 != nil {
		return false, "Http request error"
	}

	body, _ := io.ReadAll(res.Response().Body)
	json, err2 := simplejson.NewJson(body)
	if err2 != nil {
		return false, "Json parse error" + "【" + string(body) + "】"
	}

	_, hasError := json.CheckGet("errors")
	_, hasData := json.CheckGet("data")

	if !hasError && hasData {
		return true, string(body)
	}

	return false, string(body)
}

// 检查小组是否允许用户发帖
func checkGroupCanPost(param GraphqlParam, doc_id string, groupId string) (bool, string) {
	variables := `{"groupID":"` + groupId + `","imageMediaType":"image/x-auto","inviteShortLinkKey":null,"isChainingRecommendationUnit":false,"scale":1.5,"__relay_internal__pv__CometGlobalPanelEMCopresencerelayprovider":false,"__relay_internal__pv__GroupsCometEntityMenuSearchBarEnabledrelayprovider":false,"__relay_internal__pv__GroupsCometEntityMenuEmbeddedrelayprovider":false}`

	param.Fb_api_req_friendly_name = "CometGroupRootQuery"
	param.Variables = variables
	param.Fb_api_caller_class = "RelayModern"
	param.Ccg = "EXCELLENT"
	param.Doc_id = doc_id

	success, result := graphql(param)
	if !success {
		return false, "检测小组是否可以发帖时发生错误!"
	}

	if strings.Contains(result, `"if_can_share_group":null`) {
		//小组被归档
		return false, "小组已被归档!"
	}

	if strings.Contains(result, `"if_viewer_can_change_post_permissions":null`) {
		//只允许管理员发帖
		return false, "只允许管理员发帖!"
	}

	if strings.Contains(result, `\u7ba1\u7406\u5458\u5df2\u6682\u65f6\u5c06\u4f60`) {
		//管理员已暂时将你禁言
		return false, "管理员已暂时将你禁言!"
	}

	return true, "OK!"
}

// func parsePosts(text string) map[string]string {
// 	data := strings.Split(text, "\r\n")[1:]
// 	cookie := `sb=B8cxY_YiwSBc3yyfioWVblvT; datr=B8cxY0y440eqTWBwgyKbqYLw; locale=zh_CN; c_user=100066367938227; wd=1536x722; dpr=1.25; xs=29:fsPM2knl4actqQ:2:1664221985:-1:11264::AcUR5LZkKLQW5O9f6u-lC6XSKnleCFdiq05xVtPmgss; fr=0KuDqZM0YyHlFZtQQ.AWX7PdUc7VJBG40oZBSDZdKcsAA.BjOLDn.dd.AAA.0.0.BjOLq2.AWV3aSQEdFg; presence=C{"t3":[],"utc3":1664662206636,"v":1}`
// 	paramOk, graphqlParam := GetGraphqlParam(cookie)

// 	log.Print(paramOk)

// 	for _, value := range data {
// 		json, err := simplejson.NewJson([]byte(value))
// 		global.CheckErr(err)

// 		encrypted_tracking := json.Get("data").Get("node").Get("comet_sections").Get("context_layout").Get("story").Get("comet_sections").Get("title").Get("story").Get("encrypted_tracking").MustString()
// 		url := json.Get("data").Get("node").Get("comet_sections").Get("content").Get("story").Get("wwwURL").MustString()
// 		id := json.Get("data").Get("node").Get("feedback").Get("id").MustString()
// 		message := json.Get("data").Get("node").Get("comet_sections").Get("content").Get("story").Get("message").Get("text").MustString()
// 		message = strings.ReplaceAll(message, "\n", "")

// 		//没有内容的帖子就不要
// 		if len(message) > 0 {
// 			log.Printf(" [id]: %s [内容]: %s [文章链接]: %s", id, message, url)
// 			fmt.Println(encrypted_tracking)

// 			Like(graphqlParam, "5703418209680126", id, encrypted_tracking)
// 		}

// 	}

// 	return make(map[string]string)
// }

// func mergerBulkRouteCsr(bulkRouteJson string, old []int) []int {

// 	/***
// 	POST https://www.facebook.com/ajax/bulk-route-definitions/
// 	从以上链接中提取csr跟dyn资源，更新合并原有cyn跟csr，这也就是为什么csr跟dyn每次都会变，是因为资源发生了更新
// 	****/

// 	var buffer = make([]int, len(old))
// 	copy(buffer, old)

// 	json, err := simplejson.NewJson([]byte(bulkRouteJson))
// 	global.CheckErr(err)
// 	csrUpgrade := json.Get("payload").Get("sr_payload").Get("hsrp").Get("hblp").Get("csrUpgrade").MustString()
// 	for _, value := range strings.Split(strings.ReplaceAll(csrUpgrade, ":", ""), ",") {
// 		if len(value) > 0 {
// 			v, err := strconv.Atoi(value)
// 			global.CheckErr(err)
// 			buffer = append(buffer, v)
// 		}
// 	}

// 	return buffer
// }

// func mergerBulkRouteDyn(bulkRouteJson string, old []int) []int {

// 	/***
// 	POST https://www.facebook.com/ajax/bulk-route-definitions/
// 	从以上链接中提取csr跟dyn资源，更新合并原有cyn跟csr，这也就是为什么csr跟dyn每次都会变，是因为资源发生了更新
// 	****/

// 	var buffer = make([]int, len(old))
// 	copy(buffer, old)

// 	json, err := simplejson.NewJson([]byte(bulkRouteJson))
// 	global.CheckErr(err)
// 	for i := 0; i < len(json.Get("payload").Get("sr_payload").Get("jsmods").Get("define").MustArray()); i++ {
// 		value := json.Get("payload").Get("sr_payload").Get("jsmods").Get("define").GetIndex(i).GetIndex(3).MustInt()
// 		buffer = append(buffer, value)
// 	}
// 	return buffer
// }
